// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import { Test } from 'forge-std/Test.sol';
import { console } from 'forge-std/console.sol';
import {Vm} from "forge-std/Vm.sol";
import {BebopSettlement} from 'src/settlement/BebopSettlement.sol';
import {IWETH} from "src/interfaces/IWETH.sol";
import {ERC20} from "solmate/src/tokens/ERC20.sol";



contract Bebop is Test {

    IWETH weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
    ERC20 usdt;
    address swapper;
    BebopSettlement bebopContract = BebopSettlement(payable(0xbbbbbBB520d69a9775E85b458C58c648259FAD5F));


    function setUp() public {
        swapper = address(this);
    
        vm.deal(address(this), 1 * (10 ** 18));
        

    }
    function testBebopSwap() public {
        //swapper now has 1 ETH
        
        
        console.log(address(swapper));
        console.log(msg.sender);
        //weth.deposit{value: 1 * (10 ** 18)}();
        // approve the bebop contract for 10000 in WETH
        //weth.approve(0xbbbbbBB520d69a9775E85b458C58c648259FAD5F, 100000000000);
        // call bebop with calldata
        bytes memory callData = "0x4dcebcba0000000000000000000000000000000000000000000000000000000067b865960000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e149600000000000000000000000051c72848c68a965f66fa7a88855f9f7784502a7f0000000000000000000000000000000000000000000000000000032a3c03645a000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000001083e0f10000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496000000000000000000000000000000000000000000000000000000000000000037a4ee0813ab5125461bc5b263ba8cf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000415f1bb46ea33d30d59e04a288d40c68c88e30e569e7c805826db644a1fe32a265728942bc7cce3d60b27cae092fb7267d70f3680d6e075646118b566ff956a8a91c00000000000000000000000000000000000000000000000000000000000000";
 
        (bool success, bytes memory result) = payable(bebopContract).call{value: 100000000000000000}(callData);
        require(success,"failed");
        console.logBytes(result);
      


        
    }
}