/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SignedOrderStruct = { order: BytesLike; sig: BytesLike };

export type SignedOrderStructOutput = [order: string, sig: string] & {
  order: string;
  sig: string;
};

export type OrderInfoStruct = {
  reactor: AddressLike;
  swapper: AddressLike;
  nonce: BigNumberish;
  deadline: BigNumberish;
  additionalValidationContract: AddressLike;
  additionalValidationData: BytesLike;
};

export type OrderInfoStructOutput = [
  reactor: string,
  swapper: string,
  nonce: bigint,
  deadline: bigint,
  additionalValidationContract: string,
  additionalValidationData: string
] & {
  reactor: string;
  swapper: string;
  nonce: bigint;
  deadline: bigint;
  additionalValidationContract: string;
  additionalValidationData: string;
};

export type InputTokenStruct = {
  token: AddressLike;
  amount: BigNumberish;
  maxAmount: BigNumberish;
};

export type InputTokenStructOutput = [
  token: string,
  amount: bigint,
  maxAmount: bigint
] & { token: string; amount: bigint; maxAmount: bigint };

export type OutputTokenStruct = {
  token: AddressLike;
  amount: BigNumberish;
  recipient: AddressLike;
};

export type OutputTokenStructOutput = [
  token: string,
  amount: bigint,
  recipient: string
] & { token: string; amount: bigint; recipient: string };

export type ResolvedOrderStruct = {
  info: OrderInfoStruct;
  input: InputTokenStruct;
  outputs: OutputTokenStruct[];
  sig: BytesLike;
  hash: BytesLike;
};

export type ResolvedOrderStructOutput = [
  info: OrderInfoStructOutput,
  input: InputTokenStructOutput,
  outputs: OutputTokenStructOutput[],
  sig: string,
  hash: string
] & {
  info: OrderInfoStructOutput;
  input: InputTokenStructOutput;
  outputs: OutputTokenStructOutput[];
  sig: string;
  hash: string;
};

export interface SwapRouter02ExecutorNewInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "execute"
      | "executeBatch"
      | "multicall"
      | "owner"
      | "reactorCallback"
      | "transferOwnership"
      | "unwrapWETH"
      | "withdrawETH"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "execute",
    values: [SignedOrderStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [SignedOrderStruct[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [AddressLike[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reactorCallback",
    values: [ResolvedOrderStruct[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reactorCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unwrapWETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwapRouter02ExecutorNew extends BaseContract {
  connect(runner?: ContractRunner | null): SwapRouter02ExecutorNew;
  waitForDeployment(): Promise<this>;

  interface: SwapRouter02ExecutorNewInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  execute: TypedContractMethod<
    [order: SignedOrderStruct, callbackData: BytesLike],
    [void],
    "nonpayable"
  >;

  executeBatch: TypedContractMethod<
    [orders: SignedOrderStruct[], callbackData: BytesLike],
    [void],
    "nonpayable"
  >;

  multicall: TypedContractMethod<
    [tokensToApprove: AddressLike[], multicallData: BytesLike[]],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  reactorCallback: TypedContractMethod<
    [arg0: ResolvedOrderStruct[], callbackData: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unwrapWETH: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [order: SignedOrderStruct, callbackData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeBatch"
  ): TypedContractMethod<
    [orders: SignedOrderStruct[], callbackData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<
    [tokensToApprove: AddressLike[], multicallData: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reactorCallback"
  ): TypedContractMethod<
    [arg0: ResolvedOrderStruct[], callbackData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unwrapWETH"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
