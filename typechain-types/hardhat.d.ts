/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IAllowanceTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAllowanceTransfer__factory>;
    getContractFactory(
      name: "IEIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEIP712__factory>;
    getContractFactory(
      name: "IPermit2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPermit2__factory>;
    getContractFactory(
      name: "ISignatureTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignatureTransfer__factory>;
    getContractFactory(
      name: "Owned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Owned__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "WETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH__factory>;
    getContractFactory(
      name: "BebopPartner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BebopPartner__factory>;
    getContractFactory(
      name: "BebopSigning",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BebopSigning__factory>;
    getContractFactory(
      name: "BebopTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BebopTransfer__factory>;
    getContractFactory(
      name: "BlockNumberish",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockNumberish__factory>;
    getContractFactory(
      name: "ProtocolFees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolFees__factory>;
    getContractFactory(
      name: "ReactorEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReactorEvents__factory>;
    getContractFactory(
      name: "ISwapRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter02__factory>;
    getContractFactory(
      name: "IUniversalRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniversalRouter__factory>;
    getContractFactory(
      name: "IArbSys",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbSys__factory>;
    getContractFactory(
      name: "IBebopSettlement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBebopSettlement__factory>;
    getContractFactory(
      name: "IDaiLikePermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDaiLikePermit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IPermit2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPermit2__factory>;
    getContractFactory(
      name: "IProtocolFeeController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolFeeController__factory>;
    getContractFactory(
      name: "IReactor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReactor__factory>;
    getContractFactory(
      name: "IReactorCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReactorCallback__factory>;
    getContractFactory(
      name: "IValidationCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IValidationCallback__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "OrderQuoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderQuoter__factory>;
    getContractFactory(
      name: "SafeCast160",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast160__factory>;
    getContractFactory(
      name: "CosignerLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CosignerLib__factory>;
    getContractFactory(
      name: "CurrencyLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurrencyLibrary__factory>;
    getContractFactory(
      name: "DutchDecayLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DutchDecayLib__factory>;
    getContractFactory(
      name: "ExclusivityLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExclusivityLib__factory>;
    getContractFactory(
      name: "NonlinearDutchDecayLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonlinearDutchDecayLib__factory>;
    getContractFactory(
      name: "ResolvedOrderLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResolvedOrderLib__factory>;
    getContractFactory(
      name: "BaseReactor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseReactor__factory>;
    getContractFactory(
      name: "DutchOrderReactor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DutchOrderReactor__factory>;
    getContractFactory(
      name: "ExclusiveDutchOrderReactor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExclusiveDutchOrderReactor__factory>;
    getContractFactory(
      name: "LimitOrderReactor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitOrderReactor__factory>;
    getContractFactory(
      name: "PriorityOrderReactor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriorityOrderReactor__factory>;
    getContractFactory(
      name: "V2DutchOrderReactor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.V2DutchOrderReactor__factory>;
    getContractFactory(
      name: "V3DutchOrderReactor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.V3DutchOrderReactor__factory>;
    getContractFactory(
      name: "BebopExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BebopExecutor__factory>;
    getContractFactory(
      name: "MultiFillerSwapRouter02Executor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiFillerSwapRouter02Executor__factory>;
    getContractFactory(
      name: "SwapRouter02Executor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapRouter02Executor__factory>;
    getContractFactory(
      name: "SwapRouter02ExecutorNew",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapRouter02ExecutorNew__factory>;
    getContractFactory(
      name: "UniversalRouterExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniversalRouterExecutor__factory>;
    getContractFactory(
      name: "ExclusiveFillerValidation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExclusiveFillerValidation__factory>;
    getContractFactory(
      name: "BebopSettlement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BebopSettlement__factory>;

    getContractAt(
      name: "IERC1271",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IAllowanceTransfer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAllowanceTransfer>;
    getContractAt(
      name: "IEIP712",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEIP712>;
    getContractAt(
      name: "IPermit2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPermit2>;
    getContractAt(
      name: "ISignatureTransfer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignatureTransfer>;
    getContractAt(
      name: "Owned",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Owned>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "WETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH>;
    getContractAt(
      name: "BebopPartner",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BebopPartner>;
    getContractAt(
      name: "BebopSigning",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BebopSigning>;
    getContractAt(
      name: "BebopTransfer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BebopTransfer>;
    getContractAt(
      name: "BlockNumberish",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockNumberish>;
    getContractAt(
      name: "ProtocolFees",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolFees>;
    getContractAt(
      name: "ReactorEvents",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReactorEvents>;
    getContractAt(
      name: "ISwapRouter02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter02>;
    getContractAt(
      name: "IUniversalRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniversalRouter>;
    getContractAt(
      name: "IArbSys",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IArbSys>;
    getContractAt(
      name: "IBebopSettlement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBebopSettlement>;
    getContractAt(
      name: "IDaiLikePermit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDaiLikePermit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IPermit2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPermit2>;
    getContractAt(
      name: "IProtocolFeeController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolFeeController>;
    getContractAt(
      name: "IReactor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IReactor>;
    getContractAt(
      name: "IReactorCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IReactorCallback>;
    getContractAt(
      name: "IValidationCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IValidationCallback>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "OrderQuoter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderQuoter>;
    getContractAt(
      name: "SafeCast160",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast160>;
    getContractAt(
      name: "CosignerLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CosignerLib>;
    getContractAt(
      name: "CurrencyLibrary",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CurrencyLibrary>;
    getContractAt(
      name: "DutchDecayLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DutchDecayLib>;
    getContractAt(
      name: "ExclusivityLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExclusivityLib>;
    getContractAt(
      name: "NonlinearDutchDecayLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NonlinearDutchDecayLib>;
    getContractAt(
      name: "ResolvedOrderLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ResolvedOrderLib>;
    getContractAt(
      name: "BaseReactor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseReactor>;
    getContractAt(
      name: "DutchOrderReactor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DutchOrderReactor>;
    getContractAt(
      name: "ExclusiveDutchOrderReactor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExclusiveDutchOrderReactor>;
    getContractAt(
      name: "LimitOrderReactor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitOrderReactor>;
    getContractAt(
      name: "PriorityOrderReactor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PriorityOrderReactor>;
    getContractAt(
      name: "V2DutchOrderReactor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.V2DutchOrderReactor>;
    getContractAt(
      name: "V3DutchOrderReactor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.V3DutchOrderReactor>;
    getContractAt(
      name: "BebopExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BebopExecutor>;
    getContractAt(
      name: "MultiFillerSwapRouter02Executor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiFillerSwapRouter02Executor>;
    getContractAt(
      name: "SwapRouter02Executor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapRouter02Executor>;
    getContractAt(
      name: "SwapRouter02ExecutorNew",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapRouter02ExecutorNew>;
    getContractAt(
      name: "UniversalRouterExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniversalRouterExecutor>;
    getContractAt(
      name: "ExclusiveFillerValidation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExclusiveFillerValidation>;
    getContractAt(
      name: "BebopSettlement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BebopSettlement>;

    deployContract(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IAllowanceTransfer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAllowanceTransfer>;
    deployContract(
      name: "IEIP712",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEIP712>;
    deployContract(
      name: "IPermit2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPermit2>;
    deployContract(
      name: "ISignatureTransfer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISignatureTransfer>;
    deployContract(
      name: "Owned",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Owned>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "WETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETH>;
    deployContract(
      name: "BebopPartner",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BebopPartner>;
    deployContract(
      name: "BebopSigning",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BebopSigning>;
    deployContract(
      name: "BebopTransfer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BebopTransfer>;
    deployContract(
      name: "BlockNumberish",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlockNumberish>;
    deployContract(
      name: "ProtocolFees",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProtocolFees>;
    deployContract(
      name: "ReactorEvents",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReactorEvents>;
    deployContract(
      name: "ISwapRouter02",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapRouter02>;
    deployContract(
      name: "IUniversalRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniversalRouter>;
    deployContract(
      name: "IArbSys",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IArbSys>;
    deployContract(
      name: "IBebopSettlement",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBebopSettlement>;
    deployContract(
      name: "IDaiLikePermit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDaiLikePermit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IPermit2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPermit2>;
    deployContract(
      name: "IProtocolFeeController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProtocolFeeController>;
    deployContract(
      name: "IReactor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReactor>;
    deployContract(
      name: "IReactorCallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReactorCallback>;
    deployContract(
      name: "IValidationCallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValidationCallback>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "OrderQuoter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderQuoter>;
    deployContract(
      name: "SafeCast160",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast160>;
    deployContract(
      name: "CosignerLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CosignerLib>;
    deployContract(
      name: "CurrencyLibrary",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CurrencyLibrary>;
    deployContract(
      name: "DutchDecayLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DutchDecayLib>;
    deployContract(
      name: "ExclusivityLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExclusivityLib>;
    deployContract(
      name: "NonlinearDutchDecayLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NonlinearDutchDecayLib>;
    deployContract(
      name: "ResolvedOrderLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ResolvedOrderLib>;
    deployContract(
      name: "BaseReactor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseReactor>;
    deployContract(
      name: "DutchOrderReactor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DutchOrderReactor>;
    deployContract(
      name: "ExclusiveDutchOrderReactor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExclusiveDutchOrderReactor>;
    deployContract(
      name: "LimitOrderReactor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LimitOrderReactor>;
    deployContract(
      name: "PriorityOrderReactor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriorityOrderReactor>;
    deployContract(
      name: "V2DutchOrderReactor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.V2DutchOrderReactor>;
    deployContract(
      name: "V3DutchOrderReactor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.V3DutchOrderReactor>;
    deployContract(
      name: "BebopExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BebopExecutor>;
    deployContract(
      name: "MultiFillerSwapRouter02Executor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiFillerSwapRouter02Executor>;
    deployContract(
      name: "SwapRouter02Executor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SwapRouter02Executor>;
    deployContract(
      name: "SwapRouter02ExecutorNew",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SwapRouter02ExecutorNew>;
    deployContract(
      name: "UniversalRouterExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniversalRouterExecutor>;
    deployContract(
      name: "ExclusiveFillerValidation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExclusiveFillerValidation>;
    deployContract(
      name: "BebopSettlement",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BebopSettlement>;

    deployContract(
      name: "IERC1271",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IAllowanceTransfer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAllowanceTransfer>;
    deployContract(
      name: "IEIP712",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEIP712>;
    deployContract(
      name: "IPermit2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPermit2>;
    deployContract(
      name: "ISignatureTransfer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISignatureTransfer>;
    deployContract(
      name: "Owned",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Owned>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "WETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETH>;
    deployContract(
      name: "BebopPartner",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BebopPartner>;
    deployContract(
      name: "BebopSigning",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BebopSigning>;
    deployContract(
      name: "BebopTransfer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BebopTransfer>;
    deployContract(
      name: "BlockNumberish",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlockNumberish>;
    deployContract(
      name: "ProtocolFees",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProtocolFees>;
    deployContract(
      name: "ReactorEvents",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReactorEvents>;
    deployContract(
      name: "ISwapRouter02",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapRouter02>;
    deployContract(
      name: "IUniversalRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniversalRouter>;
    deployContract(
      name: "IArbSys",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IArbSys>;
    deployContract(
      name: "IBebopSettlement",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBebopSettlement>;
    deployContract(
      name: "IDaiLikePermit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDaiLikePermit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IPermit2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPermit2>;
    deployContract(
      name: "IProtocolFeeController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProtocolFeeController>;
    deployContract(
      name: "IReactor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReactor>;
    deployContract(
      name: "IReactorCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReactorCallback>;
    deployContract(
      name: "IValidationCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValidationCallback>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "OrderQuoter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderQuoter>;
    deployContract(
      name: "SafeCast160",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast160>;
    deployContract(
      name: "CosignerLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CosignerLib>;
    deployContract(
      name: "CurrencyLibrary",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CurrencyLibrary>;
    deployContract(
      name: "DutchDecayLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DutchDecayLib>;
    deployContract(
      name: "ExclusivityLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExclusivityLib>;
    deployContract(
      name: "NonlinearDutchDecayLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NonlinearDutchDecayLib>;
    deployContract(
      name: "ResolvedOrderLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ResolvedOrderLib>;
    deployContract(
      name: "BaseReactor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseReactor>;
    deployContract(
      name: "DutchOrderReactor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DutchOrderReactor>;
    deployContract(
      name: "ExclusiveDutchOrderReactor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExclusiveDutchOrderReactor>;
    deployContract(
      name: "LimitOrderReactor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LimitOrderReactor>;
    deployContract(
      name: "PriorityOrderReactor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriorityOrderReactor>;
    deployContract(
      name: "V2DutchOrderReactor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.V2DutchOrderReactor>;
    deployContract(
      name: "V3DutchOrderReactor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.V3DutchOrderReactor>;
    deployContract(
      name: "BebopExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BebopExecutor>;
    deployContract(
      name: "MultiFillerSwapRouter02Executor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiFillerSwapRouter02Executor>;
    deployContract(
      name: "SwapRouter02Executor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SwapRouter02Executor>;
    deployContract(
      name: "SwapRouter02ExecutorNew",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SwapRouter02ExecutorNew>;
    deployContract(
      name: "UniversalRouterExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniversalRouterExecutor>;
    deployContract(
      name: "ExclusiveFillerValidation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExclusiveFillerValidation>;
    deployContract(
      name: "BebopSettlement",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BebopSettlement>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
