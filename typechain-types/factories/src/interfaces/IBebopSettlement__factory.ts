/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IBebopSettlement,
  IBebopSettlementInterface,
} from "../../../src/interfaces/IBebopSettlement";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "eventId",
        type: "uint128",
      },
    ],
    name: "BebopOrder",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_address",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker_address",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maker_nonce",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_token",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker_token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "taker_amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maker_amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "packed_commands",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct Order.Single",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "signatureBytes",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct Signature.MakerSignature",
        name: "makerSignature",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "filledTakerAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "useOldAmount",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "makerAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "makerNonce",
            type: "uint256",
          },
        ],
        internalType: "struct Transfer.OldSingleQuote",
        name: "takerQuoteInfo",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "takerSignature",
        type: "bytes",
      },
    ],
    name: "settleSingle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_address",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker_address",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maker_nonce",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_token",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker_token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "taker_amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maker_amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "packed_commands",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct Order.Single",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "signatureBytes",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct Signature.MakerSignature",
        name: "makerSignature",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "filledTakerAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "useOldAmount",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "makerAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "makerNonce",
            type: "uint256",
          },
        ],
        internalType: "struct Transfer.OldSingleQuote",
        name: "takerQuoteInfo",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "takerSignature",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "signatureBytes",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct Signature.PermitSignature",
        name: "takerPermitSignature",
        type: "tuple",
      },
    ],
    name: "settleSingleAndSignPermit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_address",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker_address",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maker_nonce",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_token",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker_token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "taker_amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maker_amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "packed_commands",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct Order.Single",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "signatureBytes",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct Signature.MakerSignature",
        name: "makerSignature",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "filledTakerAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "useOldAmount",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "makerAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "makerNonce",
            type: "uint256",
          },
        ],
        internalType: "struct Transfer.OldSingleQuote",
        name: "takerQuoteInfo",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "takerSignature",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "signatureBytes",
            type: "bytes",
          },
          {
            internalType: "uint48",
            name: "deadline",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "nonce",
            type: "uint48",
          },
        ],
        internalType: "struct Signature.Permit2Signature",
        name: "takerPermit2Signature",
        type: "tuple",
      },
    ],
    name: "settleSingleAndSignPermit2",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_address",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker_address",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maker_nonce",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_token",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker_token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "taker_amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maker_amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "packed_commands",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct Order.Single",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "signatureBytes",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct Signature.MakerSignature",
        name: "makerSignature",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "filledTakerAmount",
        type: "uint256",
      },
    ],
    name: "swapSingle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_address",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker_address",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maker_nonce",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_token",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker_token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "taker_amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maker_amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "packed_commands",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct Order.Single",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "signatureBytes",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct Signature.MakerSignature",
        name: "makerSignature",
        type: "tuple",
      },
    ],
    name: "swapSingleFromContract",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IBebopSettlement__factory {
  static readonly abi = _abi;
  static createInterface(): IBebopSettlementInterface {
    return new Interface(_abi) as IBebopSettlementInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IBebopSettlement {
    return new Contract(address, _abi, runner) as unknown as IBebopSettlement;
  }
}
