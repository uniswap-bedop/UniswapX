/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  BebopSigning,
  BebopSigningInterface,
} from "../../../src/base/BebopSigning";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "OrderSignerRegistered",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_address",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "maker_addresses",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "maker_nonces",
            type: "uint256[]",
          },
          {
            internalType: "address[][]",
            name: "taker_tokens",
            type: "address[][]",
          },
          {
            internalType: "address[][]",
            name: "maker_tokens",
            type: "address[][]",
          },
          {
            internalType: "uint256[][]",
            name: "taker_amounts",
            type: "uint256[][]",
          },
          {
            internalType: "uint256[][]",
            name: "maker_amounts",
            type: "uint256[][]",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "commands",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct Order.Aggregate",
        name: "order",
        type: "tuple",
      },
      {
        internalType: "uint64",
        name: "partnerId",
        type: "uint64",
      },
      {
        internalType: "uint256[][]",
        name: "updatedMakerAmounts",
        type: "uint256[][]",
      },
      {
        internalType: "uint256[]",
        name: "updatedMakerNonces",
        type: "uint256[]",
      },
    ],
    name: "hashAggregateOrder",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_address",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker_address",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maker_nonce",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "taker_token",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker_token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "taker_amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maker_amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "packed_commands",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
        ],
        internalType: "struct Order.Single",
        name: "order",
        type: "tuple",
      },
      {
        internalType: "uint64",
        name: "partnerId",
        type: "uint64",
      },
      {
        internalType: "uint256",
        name: "updatedMakerAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedMakerNonce",
        type: "uint256",
      },
    ],
    name: "hashSingleOrder",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "registerAllowedOrderSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class BebopSigning__factory {
  static readonly abi = _abi;
  static createInterface(): BebopSigningInterface {
    return new Interface(_abi) as BebopSigningInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BebopSigning {
    return new Contract(address, _abi, runner) as unknown as BebopSigning;
  }
}
